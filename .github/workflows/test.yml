# -------------------------------------------------
# GitHub Actions Test
#
# Copyleft (c) by Maksimus
#--------------------------------------------------
name: Docker-To-CR-YaCloud                                                  # Name of Workflow (try to create name without "whitespace")
# env:                                                                         # VARIABLES of "workflow" level
#   APPLICATION_NAME       : "MyFlask"
#   DEPLOY_PACKAGE_NAME    : "flask-deploy-version-${{ github.sha }}"         # Uses variable with context-${{ context.property }}, in our case context="github",property="sha"

on:                                                                          # You may have several workflow-files in same directory, that's why you must specify condition for run
  push:                                                                      # condition for run this workflow "My-GitHub-Action-Basics" (or my-basics.yml) is everytime when "push" *
    branches:                                                                # * to branch, which name  *
      - master                                                               # *  is "master". Could be few : [push,pull_request, e.t.c] 
jobs:                                                                        # Blocks of JOBS. Like blocks in "Ansible".
  my-testing:                                                                # name of JOB 1
    runs-on: ubuntu-latest                                                   # Named as "runner". Type of OS (Docker image with certain OS) which will execute commands . Could be few : [ubuntu-latest, windows-2019, e.t.c]

    steps:                                                                   # Blocks of STEPS. Like blocks in "Ansible".
    - name: Git clone my repo                                                # name of step 4
      uses: actions/checkout@v4                                              # Instruction for executing script (GitHub Action script which cloning your repository to the "runner")
      
    - name: Login to Yandex Cloud Container Registry
      id: login-cr
      uses: yc-actions/yc-cr-login@v2                                        # https://github.com/yc-actions/yc-cr-login?tab=readme-ov-file
      with:
        yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}

    - name: Build, tag, and push image to Yandex Cloud Container Registry
      env:
        CR_REGISTRY: crp1u0sq9ek5h31a1ttu
        CR_REPOSITORY: simple-webapp-image
        IMAGE_TAG: ${{ github.run_attempt }}
      run: |
        docker build -t cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG .
        docker push cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG
    
    
    
    - name: Install yc CLI
      shell: bash
      run: curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash

    - name: List and grep envs
      run: env | grep PATH
      
#    - name: List directory
#      run: ls -l

#    - name: Reboot user's environments
#      run: source /home/runner/.bashrc
#
#    - name: Execute few commands 
#      run: ls -l /home/runner/yandex-cloud
#
#    - name: execute some command
#      run: grep --help
    

#    - name: Check YC CLI version
#      run: yc version

#    - name: Print Hello Message in Testing                                   # name of step 2
#      run: echo "Hello World from Testing job"                               # Executing COMMANDS. May be few, in that case you must use pipe "|"
#
#    - name: Execute few commands                                             # name of step 3
#      run: |
#        echo "Hello Message1"
#        echo "Hello Message1"
#        echo "Application name is: ${{env.APPLICATION_NAME}}"                # Use variable with context, but might be used just $APPLICATION_NAME in "run" instruction, like in OS (Linux)
#
#    - name: Git clone my repo                                                # name of step 4
#      uses: actions/checkout@v4                                              # Instruction for executing script (GitHub Action script which cloning your repository to the "runner") 
#
#    - name: List current folder                                              # name of step 5
#      run: ls -la
#
#  my-deploy:                                                                 # name of job 2
#    runs-on: ubuntu-latest
#    needs: [my-testing]                                                      # Dependence. JOB 2 start after JOB 1 will be done
#    env:                                                                     # VARIABLES of "job" level
#      VAR1: "This is Job Level Variable 1"
#      VAR2: "This is Job Level Variable 2"
#
#    steps:
#    - name: Print Hello Message in Deploy                                    # name of step 1
#      run: echo "Hello World from Deploy job"
#
#    - name: Print ENV vars                                                   # name of step 2
#      run: |
#        echo "Var1 = ${{env.VAR1}}"
#        echo "Var2 = ${{env.VAR2}}"
#        echo "Var3 = $LOCAL_VAR"
#      env:                                                                   # VARIABLES of "step" level
#        LOCAL_VAR: " This is super Local variable"
#
#
#    - name: Printing Deplyment package                                       # name of step 3
#      run: echo "Deploy package name is ${{env.DEPLOY_PACKAGE_NAME}}"
#
#    - name: Lets test some packeges if the are here 1                        # name of step 4
#      run: aws --version
#
#    - name: Lets test some packeges if the are here 2                        # name of step 5
#      run: zip --version
